/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos, and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 - 2023 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 104 }


  /* === schema: public === */

  /* --- enums --- */
  /* (none) */

  /* --- tables --- */

  /**
   * **agenda_item**
   * - Table in database
   */
  export namespace agenda_item {
    export type Table = 'agenda_item';
    export interface Selectable {
      /**
      * **agenda_item.agenda_item_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      agenda_item_id: string;
      /**
      * **agenda_item.meeting_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      meeting_id: string;
      /**
      * **agenda_item.ext_file_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      ext_file_id: string;
      /**
      * **agenda_item.type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      type: string;
      /**
      * **agenda_item.status**
      * - `text` in database
      * - Nullable, no default
      */
      status: string | null;
      /**
      * **agenda_item.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string;
      /**
      * **agenda_item.action**
      * - `text` in database
      * - Nullable, no default
      */
      action: string | null;
      /**
      * **agenda_item.result**
      * - `text` in database
      * - Nullable, no default
      */
      result: string | null;
      /**
      * **agenda_item.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: Date;
    }
    export interface JSONSelectable {
      /**
      * **agenda_item.agenda_item_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      agenda_item_id: string;
      /**
      * **agenda_item.meeting_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      meeting_id: string;
      /**
      * **agenda_item.ext_file_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      ext_file_id: string;
      /**
      * **agenda_item.type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      type: string;
      /**
      * **agenda_item.status**
      * - `text` in database
      * - Nullable, no default
      */
      status: string | null;
      /**
      * **agenda_item.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string;
      /**
      * **agenda_item.action**
      * - `text` in database
      * - Nullable, no default
      */
      action: string | null;
      /**
      * **agenda_item.result**
      * - `text` in database
      * - Nullable, no default
      */
      result: string | null;
      /**
      * **agenda_item.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: db.TimestampTzString;
    }
    export interface Whereable {
      /**
      * **agenda_item.agenda_item_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      agenda_item_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **agenda_item.meeting_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      meeting_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **agenda_item.ext_file_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      ext_file_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **agenda_item.type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      type?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **agenda_item.status**
      * - `text` in database
      * - Nullable, no default
      */
      status?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **agenda_item.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **agenda_item.action**
      * - `text` in database
      * - Nullable, no default
      */
      action?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **agenda_item.result**
      * - `text` in database
      * - Nullable, no default
      */
      result?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **agenda_item.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **agenda_item.agenda_item_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      agenda_item_id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **agenda_item.meeting_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      meeting_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **agenda_item.ext_file_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      ext_file_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **agenda_item.type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      type: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **agenda_item.status**
      * - `text` in database
      * - Nullable, no default
      */
      status?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **agenda_item.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **agenda_item.action**
      * - `text` in database
      * - Nullable, no default
      */
      action?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **agenda_item.result**
      * - `text` in database
      * - Nullable, no default
      */
      result?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **agenda_item.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **agenda_item.agenda_item_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      agenda_item_id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **agenda_item.meeting_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      meeting_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **agenda_item.ext_file_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      ext_file_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **agenda_item.type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      type?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **agenda_item.status**
      * - `text` in database
      * - Nullable, no default
      */
      status?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **agenda_item.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **agenda_item.action**
      * - `text` in database
      * - Nullable, no default
      */
      action?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **agenda_item.result**
      * - `text` in database
      * - Nullable, no default
      */
      result?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **agenda_item.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'agenda_item_meeting_id_ext_file_id_key' | 'agenda_item_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **meeting**
   * - Table in database
   */
  export namespace meeting {
    export type Table = 'meeting';
    export interface Selectable {
      /**
      * **meeting.meeting_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      meeting_id: string;
      /**
      * **meeting.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **meeting.start_time**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      start_time: Date;
      /**
      * **meeting.location**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      location: string;
      /**
      * **meeting.details_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      details_url: string;
      /**
      * **meeting.agenda_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      agenda_url: string;
      /**
      * **meeting.minutes_url**
      * - `text` in database
      * - Nullable, no default
      */
      minutes_url: string | null;
      /**
      * **meeting.video_url**
      * - `text` in database
      * - Nullable, no default
      */
      video_url: string | null;
      /**
      * **meeting.transcript_url**
      * - `text` in database
      * - Nullable, no default
      */
      transcript_url: string | null;
      /**
      * **meeting.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: Date;
    }
    export interface JSONSelectable {
      /**
      * **meeting.meeting_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      meeting_id: string;
      /**
      * **meeting.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **meeting.start_time**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      start_time: db.TimestampTzString;
      /**
      * **meeting.location**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      location: string;
      /**
      * **meeting.details_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      details_url: string;
      /**
      * **meeting.agenda_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      agenda_url: string;
      /**
      * **meeting.minutes_url**
      * - `text` in database
      * - Nullable, no default
      */
      minutes_url: string | null;
      /**
      * **meeting.video_url**
      * - `text` in database
      * - Nullable, no default
      */
      video_url: string | null;
      /**
      * **meeting.transcript_url**
      * - `text` in database
      * - Nullable, no default
      */
      transcript_url: string | null;
      /**
      * **meeting.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: db.TimestampTzString;
    }
    export interface Whereable {
      /**
      * **meeting.meeting_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      meeting_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **meeting.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **meeting.start_time**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      start_time?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **meeting.location**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      location?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **meeting.details_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      details_url?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **meeting.agenda_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      agenda_url?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **meeting.minutes_url**
      * - `text` in database
      * - Nullable, no default
      */
      minutes_url?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **meeting.video_url**
      * - `text` in database
      * - Nullable, no default
      */
      video_url?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **meeting.transcript_url**
      * - `text` in database
      * - Nullable, no default
      */
      transcript_url?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **meeting.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **meeting.meeting_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      meeting_id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **meeting.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **meeting.start_time**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      start_time: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **meeting.location**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      location: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **meeting.details_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      details_url: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **meeting.agenda_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      agenda_url: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **meeting.minutes_url**
      * - `text` in database
      * - Nullable, no default
      */
      minutes_url?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **meeting.video_url**
      * - `text` in database
      * - Nullable, no default
      */
      video_url?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **meeting.transcript_url**
      * - `text` in database
      * - Nullable, no default
      */
      transcript_url?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **meeting.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **meeting.meeting_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      meeting_id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **meeting.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **meeting.start_time**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      start_time?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **meeting.location**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      location?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **meeting.details_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      details_url?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **meeting.agenda_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      agenda_url?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **meeting.minutes_url**
      * - `text` in database
      * - Nullable, no default
      */
      minutes_url?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **meeting.video_url**
      * - `text` in database
      * - Nullable, no default
      */
      video_url?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **meeting.transcript_url**
      * - `text` in database
      * - Nullable, no default
      */
      transcript_url?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **meeting.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'meeting_name_start_time_key' | 'meeting_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **migrations**
   * - Table in database
   */
  export namespace migrations {
    export type Table = 'migrations';
    export interface Selectable {
      /**
      * **migrations.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id: number;
      /**
      * **migrations.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **migrations.hash**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      hash: string;
      /**
      * **migrations.executed_at**
      * - `timestamp` in database
      * - Nullable, default: `CURRENT_TIMESTAMP`
      */
      executed_at: Date | null;
    }
    export interface JSONSelectable {
      /**
      * **migrations.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id: number;
      /**
      * **migrations.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **migrations.hash**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      hash: string;
      /**
      * **migrations.executed_at**
      * - `timestamp` in database
      * - Nullable, default: `CURRENT_TIMESTAMP`
      */
      executed_at: db.TimestampString | null;
    }
    export interface Whereable {
      /**
      * **migrations.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **migrations.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **migrations.hash**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      hash?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **migrations.executed_at**
      * - `timestamp` in database
      * - Nullable, default: `CURRENT_TIMESTAMP`
      */
      executed_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **migrations.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **migrations.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **migrations.hash**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      hash: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **migrations.executed_at**
      * - `timestamp` in database
      * - Nullable, default: `CURRENT_TIMESTAMP`
      */
      executed_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **migrations.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **migrations.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **migrations.hash**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      hash?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **migrations.executed_at**
      * - `timestamp` in database
      * - Nullable, default: `CURRENT_TIMESTAMP`
      */
      executed_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'migrations_name_key' | 'migrations_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* --- aggregate types --- */

  export namespace public {  
    export type Table = agenda_item.Table | meeting.Table | migrations.Table;
    export type Selectable = agenda_item.Selectable | meeting.Selectable | migrations.Selectable;
    export type JSONSelectable = agenda_item.JSONSelectable | meeting.JSONSelectable | migrations.JSONSelectable;
    export type Whereable = agenda_item.Whereable | meeting.Whereable | migrations.Whereable;
    export type Insertable = agenda_item.Insertable | meeting.Insertable | migrations.Insertable;
    export type Updatable = agenda_item.Updatable | meeting.Updatable | migrations.Updatable;
    export type UniqueIndex = agenda_item.UniqueIndex | meeting.UniqueIndex | migrations.UniqueIndex;
    export type Column = agenda_item.Column | meeting.Column | migrations.Column;
  
    export type AllBaseTables = [agenda_item.Table, meeting.Table, migrations.Table];
    export type AllForeignTables = [];
    export type AllViews = [];
    export type AllMaterializedViews = [];
    export type AllTablesAndViews = [agenda_item.Table, meeting.Table, migrations.Table];
  }



  /* === global aggregate types === */

  export type Schema = 'public';
  export type Table = public.Table;
  export type Selectable = public.Selectable;
  export type JSONSelectable = public.JSONSelectable;
  export type Whereable = public.Whereable;
  export type Insertable = public.Insertable;
  export type Updatable = public.Updatable;
  export type UniqueIndex = public.UniqueIndex;
  export type Column = public.Column;

  export type AllSchemas = ['public'];
  export type AllBaseTables = [...public.AllBaseTables];
  export type AllForeignTables = [...public.AllForeignTables];
  export type AllViews = [...public.AllViews];
  export type AllMaterializedViews = [...public.AllMaterializedViews];
  export type AllTablesAndViews = [...public.AllTablesAndViews];


  /* === lookups === */

  export type SelectableForTable<T extends Table> = {
    "agenda_item": agenda_item.Selectable;
    "meeting": meeting.Selectable;
    "migrations": migrations.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    "agenda_item": agenda_item.JSONSelectable;
    "meeting": meeting.JSONSelectable;
    "migrations": migrations.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    "agenda_item": agenda_item.Whereable;
    "meeting": meeting.Whereable;
    "migrations": migrations.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    "agenda_item": agenda_item.Insertable;
    "meeting": meeting.Insertable;
    "migrations": migrations.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    "agenda_item": agenda_item.Updatable;
    "meeting": meeting.Updatable;
    "migrations": migrations.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    "agenda_item": agenda_item.UniqueIndex;
    "meeting": meeting.UniqueIndex;
    "migrations": migrations.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    "agenda_item": agenda_item.Column;
    "meeting": meeting.Column;
    "migrations": migrations.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    "agenda_item": agenda_item.SQL;
    "meeting": meeting.SQL;
    "migrations": migrations.SQL;
  }[T];

}
